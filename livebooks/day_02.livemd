<!-- livebook:{"persist_outputs":true} -->

# Advent of Code 2023 - Day 02

```elixir
Mix.install([
  {:kino, "~> 0.11.3"},
  {:explorer, "~> 0.7.2"},
  {:kino_explorer, "~> 0.1.12"}
])
```

## Setup

```elixir
import Kino.Shorts
require Explorer.DataFrame, as: DF

input =
  read_textarea("Puzzle input",
    monospace: true,
    default: """
    Game 1: 3 blue, 4 red; 1 red, 2 green, 6 blue; 2 green
    Game 2: 1 blue, 2 green; 3 green, 4 blue, 1 red; 1 green, 1 blue
    Game 3: 8 green, 6 blue, 20 red; 5 blue, 4 red, 13 green; 5 green, 1 red
    Game 4: 1 green, 3 red, 6 blue; 3 green, 6 red; 3 green, 15 blue, 14 red
    Game 5: 6 red, 1 blue, 3 green; 2 blue, 1 red, 2 green\
    """
  )
```

<!-- livebook:{"output":true} -->

```
"Game 1: 3 blue, 4 red; 1 red, 2 green, 6 blue; 2 green\nGame 2: 1 blue, 2 green; 3 green, 4 blue, 1 red; 1 green, 1 blue\nGame 3: 8 green, 6 blue, 20 red; 5 blue, 4 red, 13 green; 5 green, 1 red\nGame 4: 1 green, 3 red, 6 blue; 3 green, 6 red; 3 green, 15 blue, 14 red\nGame 5: 6 red, 1 blue, 3 green; 2 blue, 1 red, 2 green"
```

```elixir
defmodule Day02Helpers do
  def parse(input) do
    input
    |> String.split("\n", trim: true)
    |> Enum.map(fn line ->
      ["Game " <> number, cube_sets_string] = String.split(line, ": ", trim: true)

      game_number = String.to_integer(number)

      cube_sets =
        cube_sets_string
        |> String.split("; ", trim: true)
        |> Enum.map(fn cube_set_string ->
          cube_set_string
          |> String.split(", ")
          |> Enum.map(fn cube_count_string ->
            [count, color] = String.split(cube_count_string, " ", trim: true)

            {String.to_integer(count), color}
          end)
        end)

      {game_number, cube_sets}
    end)
  end
end
```

<!-- livebook:{"output":true} -->

```
{:module, Day02Helpers, <<70, 79, 82, 49, 0, 0, 10, ...>>, {:parse, 1}}
```

## Part 1

```elixir
input
|> Day02Helpers.parse()
|> Enum.filter(fn {_game_number, cube_sets} ->
  Enum.all?(cube_sets, fn cube_set ->
    Enum.all?(cube_set, fn
      {count, "red"} -> count <= 12
      {count, "green"} -> count <= 13
      {count, "blue"} -> count <= 14
    end)
  end)
end)
|> Enum.map(fn {game_number, _cube_sets} -> game_number end)
|> Enum.sum()
```

<!-- livebook:{"output":true} -->

```
8
```

## Part 2

```elixir
input
|> Day02Helpers.parse()
|> Enum.map(fn {_game_number, cube_sets} ->
  cube_sets
  |> List.flatten()
  |> Enum.group_by(&elem(&1, 1), &elem(&1, 0))
  |> Map.values()
  |> Enum.map(&Enum.max/1)
  |> Enum.product()
end)
|> Enum.sum()
```

<!-- livebook:{"output":true} -->

```
2286
```

## Using Explorer

```elixir
df =
  DF.new(
    for {game, cube_sets} <- Day02Helpers.parse(input),
        {cube_set, cube_set_index} <- Enum.with_index(cube_sets),
        {count, color} <- cube_set,
        do: %{game: game, cube_set: cube_set_index, count: count, color: color}
  )
```

<!-- livebook:{"output":true} -->

```text
#Explorer.DataFrame<
  Polars[35 x 4]
  color string ["blue", "red", "red", "green", "blue", ...]
  count integer [3, 4, 1, 2, 6, ...]
  cube_set integer [0, 0, 1, 1, 1, ...]
  game integer [1, 1, 1, 1, 1, ...]
>
```

```elixir
df
|> DF.pivot_wider(:color, :count)
|> DF.mutate(
  red: fill_missing(red, 0),
  green: fill_missing(green, 0),
  blue: fill_missing(blue, 0)
)
|> DF.mutate(possible: red <= 12 and green <= 13 and blue <= 14)
|> DF.group_by(:game)
|> DF.summarise(all_possible: min(cast(possible, :integer)) == 1)
|> DF.summarise(solution: sum(select(all_possible, game, 0)))
```

<!-- livebook:{"output":true} -->

```text
#Explorer.DataFrame<
  Polars[1 x 1]
  solution integer [8]
>
```

```elixir
df
|> DF.pivot_wider(:color, :count)
|> DF.group_by(:game)
|> DF.summarise(power: max(green) * max(blue) * max(red))
|> DF.summarise(solution: sum(power))
```

<!-- livebook:{"output":true} -->

```text
#Explorer.DataFrame<
  Polars[1 x 1]
  solution integer [2286]
>
```
