# Advent of Code 2023 - Day 04

```elixir
Mix.install([
  {:kino, "~> 0.11.3"}
])
```

## Setup

```elixir
import Kino.Shorts

input =
  read_textarea("Puzzle input",
    monospace: true,
    default: """
    Card 1: 41 48 83 86 17 | 83 86  6 31 17  9 48 53
    Card 2: 13 32 20 16 61 | 61 30 68 82 17 32 24 19
    Card 3:  1 21 53 59 44 | 69 82 63 72 16 21 14  1
    Card 4: 41 92 73 84 69 | 59 84 76 51 58  5 54 83
    Card 5: 87 83 26 28 32 | 88 30 70 12 93 22 82 36
    Card 6: 31 18 13 56 72 | 74 77 10 23 35 67 36 11\
    """
  )
```

```elixir
defmodule Day04Helpers do
  def parse(input) do
    input
    |> String.split("\n", trim: true)
    |> Enum.map(fn line ->
      ["Card " <> card, numbers] = String.split(line, ": ", trim: true)

      [winning_numbers, own_numbers] =
        numbers
        |> String.split(" | ", trim: true)
        |> Enum.map(fn numbers ->
          numbers
          |> String.split(" ", trim: true)
          |> MapSet.new(&String.to_integer/1)
        end)

      {String.to_integer(card), winning_numbers, own_numbers}
    end)
  end
end
```

<!-- livebook:{"branch_parent_index":0} -->

## Part 1

```elixir
input
|> Day04Helpers.parse()
|> Enum.map(fn {_card, winning_numbers, own_numbers} ->
  winning_numbers
  |> MapSet.intersection(own_numbers)
  |> MapSet.size()
  |> then(&:math.pow(2, &1 - 1))
  |> floor()
end)
|> Enum.sum()
```

<!-- livebook:{"branch_parent_index":0} -->

## Part 2

```elixir
input
|> Day04Helpers.parse()
|> Enum.reduce(%{}, fn {card, winning_numbers, own_numbers}, card_counts ->
  card_counts = Map.put_new(card_counts, card, 1)
  current_card_count = Map.fetch!(card_counts, card)

  matching_count =
    winning_numbers
    |> MapSet.intersection(own_numbers)
    |> MapSet.size()

  Enum.reduce(1..matching_count//1, card_counts, fn n, card_counts ->
    Map.update(
      card_counts,
      card + n,
      1 + current_card_count,
      &(&1 + current_card_count)
    )
  end)
end)
|> Map.values()
|> Enum.sum()
```
